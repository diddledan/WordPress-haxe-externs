package wordpress;
@:native('\\PHPMailer')
extern class PHPMailer {
    @:phpClassConst static public final STOP_MESSAGE:Dynamic;
    @:phpClassConst static public final STOP_CONTINUE:Dynamic;
    @:phpClassConst static public final STOP_CRITICAL:Dynamic;
    @:phpClassConst static public final CRLF:Dynamic;
    @:phpClassConst static public final MAX_LINE_LENGTH:Int;
    public var Version:String;
    public var Priority:Int;
    public var CharSet:String;
    public var ContentType:String;
    public var Encoding:String;
    public var ErrorInfo:String;
    public var From:String;
    public var FromName:String;
    public var Sender:String;
    public var ReturnPath:String;
    public var Subject:String;
    public var Body:String;
    public var AltBody:String;
    public var Ical:String;
    protected var MIMEBody:String;
    protected var MIMEHeader:String;
    protected var mailHeader:String;
    public var WordWrap:Int;
    public var Mailer:String;
    public var Sendmail:String;
    public var UseSendmailOptions:Bool;
    public var PluginDir:String;
    public var ConfirmReadingTo:String;
    public var Hostname:String;
    public var MessageID:String;
    public var MessageDate:String;
    public var Host:String;
    public var Port:Int;
    public var Helo:String;
    public var SMTPSecure:String;
    public var SMTPAutoTLS:Bool;
    public var SMTPAuth:Bool;
    public var SMTPOptions:Array<Dynamic>;
    public var Username:String;
    public var Password:String;
    public var AuthType:String;
    public var Realm:String;
    public var Workstation:String;
    public var Timeout:Int;
    public var SMTPDebug:Int;
    public var Debugoutput:Dynamic;
    public var SMTPKeepAlive:Bool;
    public var SingleTo:Bool;
    public var SingleToArray:Array<Dynamic>;
    public var do_verp:Bool;
    public var AllowEmpty:Bool;
    public var LE:String;
    public var DKIM_selector:String;
    public var DKIM_identity:String;
    public var DKIM_passphrase:String;
    public var DKIM_domain:String;
    public var DKIM_private:String;
    public var DKIM_private_string:String;
    public var action_function:String;
    public var XMailer:String;
    public var validator:Dynamic;
    protected var smtp:wordpress.SMTP;
    protected var to:Array<Dynamic>;
    protected var cc:Array<Dynamic>;
    protected var bcc:Array<Dynamic>;
    protected var ReplyTo:Array<Dynamic>;
    protected var all_recipients:Array<Dynamic>;
    protected var RecipientsQueue:Array<Dynamic>;
    protected var ReplyToQueue:Array<Dynamic>;
    protected var attachment:Array<Dynamic>;
    protected var CustomHeader:Array<Dynamic>;
    protected var lastMessageID:String;
    protected var message_type:String;
    protected var boundary:Array<Dynamic>;
    protected var language:Array<Dynamic>;
    protected var error_count:Int;
    protected var sign_cert_file:String;
    protected var sign_key_file:String;
    protected var sign_extracerts_file:String;
    protected var sign_key_pass:String;
    protected var exceptions:Bool;
    protected var uniqueid:String;
    public function __construct(?exceptions:Bool):Dynamic;
    public function __destruct():Dynamic;
    protected function edebug(str:String):Dynamic;
    public function isHTML(?isHtml:Bool):Void;
    public function isSMTP():Void;
    public function isMail():Void;
    public function isSendmail():Void;
    public function isQmail():Void;
    public function addAddress(address:String, ?name:String):Bool;
    public function addCC(address:String, ?name:String):Bool;
    public function addBCC(address:String, ?name:String):Bool;
    public function addReplyTo(address:String, ?name:String):Bool;
    protected function addOrEnqueueAnAddress(kind:String, address:String, name:String):Bool;
    protected function addAnAddress(kind:String, address:String, ?name:String):Bool;
    public function parseAddresses(addrstr:String, ?useimap:Bool):Array<Dynamic>;
    public function setFrom(address:String, ?name:String, ?auto:Bool):Bool;
    public function getLastMessageID():String;
    public static function validateAddress(address:String, ?patternselect:Dynamic):Bool;
    public function idnSupported():Bool;
    public function punyencodeAddress(address:String):String;
    public function send():Bool;
    public function preSend():Bool;
    public function postSend():Bool;
    protected function sendmailSend(header:String, body:String):Bool;
    protected static function isShellSafe(string:String):Bool;
    protected static function isPermittedPath(path:String):Bool;
    protected function mailSend(header:String, body:String):Bool;
    public function getSMTPInstance():wordpress.SMTP;
    protected function smtpSend(header:String, body:String):Bool;
    public function smtpConnect(?options:Array<Dynamic>):Bool;
    public function smtpClose():Void;
    public function setLanguage(?langcode:String, ?lang_path:String):Bool;
    public function getTranslations():Array<Dynamic>;
    public function addrAppend(type:String, addr:Array<Dynamic>):String;
    public function addrFormat(addr:Array<Dynamic>):String;
    public function wrapText(message:String, length:Int, ?qp_mode:Bool):String;
    public function utf8CharBoundary(encodedText:String, maxLength:Int):Int;
    public function setWordWrap():Void;
    public function createHeader():String;
    public function getMailMIME():String;
    public function getSentMIMEMessage():String;
    protected function generateId():String;
    public function createBody():String;
    protected function getBoundary(boundary:String, charSet:String, contentType:String, encoding:String):String;
    protected function endBoundary(boundary:String):String;
    protected function setMessageType():Void;
    public function headerLine(name:String, value:String):String;
    public function textLine(value:String):String;
    public function addAttachment(path:String, ?name:String, ?encoding:String, ?type:String, ?disposition:String):Bool;
    public function getAttachments():Array<Dynamic>;
    protected function attachAll(disposition_type:String, boundary:String):String;
    protected function encodeFile(path:String, ?encoding:String):String;
    public function encodeString(str:String, ?encoding:String):String;
    public function encodeHeader(str:String, ?position:String):String;
    public function hasMultiBytes(str:String):Bool;
    public function has8bitChars(text:String):Bool;
    public function base64EncodeWrapMB(str:String, ?linebreak:String):String;
    public function encodeQP(string:String, ?line_max:Int):String;
    public function encodeQPphp(string:String, ?line_max:Int, ?space_conv:Bool):String;
    public function encodeQ(str:String, ?position:String):String;
    public function addStringAttachment(string:String, filename:String, ?encoding:String, ?type:String, ?disposition:String):Void;
    public function addEmbeddedImage(path:String, cid:String, ?name:String, ?encoding:String, ?type:String, ?disposition:String):Bool;
    public function addStringEmbeddedImage(string:String, cid:String, ?name:String, ?encoding:String, ?type:String, ?disposition:String):Bool;
    public function inlineImageExists():Bool;
    public function attachmentExists():Bool;
    public function alternativeExists():Bool;
    public function clearQueuedAddresses(kind:String):Void;
    public function clearAddresses():Void;
    public function clearCCs():Void;
    public function clearBCCs():Void;
    public function clearReplyTos():Void;
    public function clearAllRecipients():Void;
    public function clearAttachments():Void;
    public function clearCustomHeaders():Void;
    protected function setError(msg:String):Void;
    public static function rfcDate():String;
    protected function serverHostname():String;
    protected function lang(key:String):String;
    public function isError():Bool;
    public function fixEOL(str:String):String;
    public function addCustomHeader(name:String, ?value:String):Void;
    public function getCustomHeaders():Array<Dynamic>;
    public function msgHTML(message:String, ?basedir:String, ?advanced:Dynamic):String;
    public function html2text(html:String, ?advanced:Dynamic):String;
    public static function _mime_types(?ext:String):String;
    public static function filenameToType(filename:String):String;
    public static function mb_pathinfo(path:String, ?options:Dynamic):Dynamic;
    public function set(name:String, ?value:Dynamic):Bool;
    public function secureHeader(str:String):String;
    public static function normalizeBreaks(text:String, ?breaktype:String):String;
    public function sign(cert_filename:String, key_filename:String, key_pass:String, ?extracerts_filename:String):Dynamic;
    public function DKIM_QP(txt:String):String;
    public function DKIM_Sign(signHeader:String):String;
    public function DKIM_HeaderC(signHeader:String):String;
    public function DKIM_BodyC(body:String):String;
    public function DKIM_Add(headers_line:String, subject:String, body:String):String;
    public static function hasLineLongerThanMax(str:String):Bool;
    public function getToAddresses():Array<Dynamic>;
    public function getCcAddresses():Array<Dynamic>;
    public function getBccAddresses():Array<Dynamic>;
    public function getReplyToAddresses():Array<Dynamic>;
    public function getAllRecipientAddresses():Array<Dynamic>;
    protected function doCallback(isSent:Bool, to:Array<Dynamic>, cc:Array<Dynamic>, bcc:Array<Dynamic>, subject:String, body:String, from:String):Dynamic;
}

