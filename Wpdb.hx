package wordpress;
@:native('\\wpdb')
extern class Wpdb {
    public var show_errors:Bool;
    public var suppress_errors:Bool;
    public var last_error:String;
    public var num_queries:Int;
    public var num_rows:Int;
    public var rows_affected:Int;
    public var insert_id:Int;
    public var last_query:Dynamic;
    public var last_result:Dynamic;
    protected var result:Dynamic;
    protected var col_meta:Array<Dynamic>;
    protected var table_charset:Array<Dynamic>;
    protected var check_current_query:Bool;
    protected var col_info:Dynamic;
    public var queries:Dynamic;
    protected var reconnect_retries:Int;
    public var prefix:String;
    public var base_prefix:Dynamic;
    public var ready:Bool;
    public var blogid:Int;
    public var siteid:Int;
    public var tables:Array<Dynamic>;
    public var old_tables:Array<Dynamic>;
    public var global_tables:Array<Dynamic>;
    public var ms_global_tables:Array<Dynamic>;
    public var comments:Dynamic;
    public var commentmeta:Dynamic;
    public var links:Dynamic;
    public var options:Dynamic;
    public var postmeta:Dynamic;
    public var posts:Dynamic;
    public var terms:Dynamic;
    public var term_relationships:Dynamic;
    public var term_taxonomy:Dynamic;
    public var termmeta:Dynamic;
    public var usermeta:Dynamic;
    public var users:Dynamic;
    public var blogs:Dynamic;
    public var blogmeta:Dynamic;
    public var registration_log:Dynamic;
    public var signups:Dynamic;
    public var site:Dynamic;
    public var sitecategories:Dynamic;
    public var sitemeta:Dynamic;
    public var field_types:Array<Dynamic>;
    public var charset:Dynamic;
    public var collate:Dynamic;
    protected var dbuser:Dynamic;
    protected var dbpassword:Dynamic;
    protected var dbname:Dynamic;
    protected var dbhost:Dynamic;
    protected var dbh:Dynamic;
    public var func_call:Dynamic;
    public var is_mysql:Bool;
    protected var incompatible_modes:Array<Dynamic>;
    public function __construct(dbuser:String, dbpassword:String, dbname:String, dbhost:String):Dynamic;
    public function __get(name:String):Dynamic;
    public function __set(name:String, value:Dynamic):Dynamic;
    public function __isset(name:String):Bool;
    public function __unset(name:String):Dynamic;
    public function init_charset():Dynamic;
    public function determine_charset(charset:String, collate:String):Array<Dynamic>;
    public function set_charset(dbh:php.Resource, ?charset:String, ?collate:String):Dynamic;
    public function set_sql_mode(?modes:Array<Dynamic>):Dynamic;
    public function set_prefix(prefix:String, ?set_table_names:Bool):Dynamic;
    public function set_blog_id(blog_id:Int, ?network_id:Int):Int;
    public function get_blog_prefix(?blog_id:Int):String;
    public function tables(?scope:String, ?prefix:Bool, ?blog_id:Int):Array<Dynamic>;
    public function select(db:String, ?dbh:Dynamic):Dynamic;
    public function _weak_escape(string:String):String;
    public function _real_escape(string:String):String;
    public function _escape(data:Dynamic):Dynamic;
    public function escape(data:Dynamic):Dynamic;
    public function escape_by_ref(string:String):Dynamic;
    public function prepare(query:String, args:Dynamic):Dynamic;
    public function esc_like(text:String):String;
    public function print_error(?str:String):Dynamic;
    public function show_errors(?show:Bool):Bool;
    public function hide_errors():Bool;
    public function suppress_errors(?suppress:Bool):Bool;
    public function flush():Dynamic;
    public function db_connect(?allow_bail:Bool):Bool;
    public function parse_db_host(host:String):Dynamic;
    public function check_connection(?allow_bail:Bool):Dynamic;
    public function query(query:String):Dynamic;
    public function log_query(query:String, query_time:Float, query_callstack:String, query_start:Float, query_data:Array<Dynamic>):Dynamic;
    public function placeholder_escape():String;
    public function add_placeholder_escape(query:String):String;
    public function remove_placeholder_escape(query:String):String;
    public function insert(table:String, data:Array<Dynamic>, ?format:Dynamic):Dynamic;
    public function replace(table:String, data:Array<Dynamic>, ?format:Dynamic):Dynamic;
    public function _insert_replace_helper(table:String, data:Array<Dynamic>, ?format:Dynamic, ?type:String):Dynamic;
    public function update(table:String, data:Array<Dynamic>, where:Array<Dynamic>, ?format:Dynamic, ?where_format:Dynamic):Dynamic;
    public function delete(table:String, where:Array<Dynamic>, ?where_format:Dynamic):Dynamic;
    protected function process_fields(table:String, data:Array<Dynamic>, format:Dynamic):Dynamic;
    protected function process_field_formats(data:Array<Dynamic>, format:Dynamic):Array<Dynamic>;
    protected function process_field_charsets(data:Array<Dynamic>, table:String):Dynamic;
    protected function process_field_lengths(data:Array<Dynamic>, table:String):Dynamic;
    public function get_var(?query:Dynamic, ?x:Int, ?y:Int):Dynamic;
    public function get_row(?query:Dynamic, ?output:String, ?y:Int):Dynamic;
    public function get_col(?query:Dynamic, ?x:Int):Array<Dynamic>;
    public function get_results(?query:String, ?output:String):Dynamic;
    protected function get_table_charset(table:String):Dynamic;
    public function get_col_charset(table:String, column:String):Dynamic;
    public function get_col_length(table:String, column:String):Dynamic;
    protected function check_ascii(string:String):Bool;
    protected function check_safe_collation(query:String):Bool;
    protected function strip_invalid_text(data:Array<Dynamic>):Dynamic;
    protected function strip_invalid_text_from_query(query:String):Dynamic;
    public function strip_invalid_text_for_column(table:String, column:String, value:String):Dynamic;
    protected function get_table_from_query(query:String):Dynamic;
    protected function load_col_info():Dynamic;
    public function get_col_info(?info_type:String, ?col_offset:Int):Dynamic;
    public function timer_start():wordpress.True;
    public function timer_stop():Float;
    public function bail(message:String, ?error_code:String):Dynamic;
    public function close():Bool;
    public function check_database_version():Dynamic;
    public function supports_collation():Bool;
    public function get_charset_collate():String;
    public function has_cap(db_cap:String):Dynamic;
    public function get_caller():String;
    public function db_version():Dynamic;
}

